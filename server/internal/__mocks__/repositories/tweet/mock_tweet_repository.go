// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\repositories\tweet\tweetrepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "twitter-clone/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTweetRepository is a mock of TweetRepository interface.
type MockTweetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTweetRepositoryMockRecorder
}

// MockTweetRepositoryMockRecorder is the mock recorder for MockTweetRepository.
type MockTweetRepositoryMockRecorder struct {
	mock *MockTweetRepository
}

// NewMockTweetRepository creates a new mock instance.
func NewMockTweetRepository(ctrl *gomock.Controller) *MockTweetRepository {
	mock := &MockTweetRepository{ctrl: ctrl}
	mock.recorder = &MockTweetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetRepository) EXPECT() *MockTweetRepositoryMockRecorder {
	return m.recorder
}

// CreateTweet mocks base method.
func (m *MockTweetRepository) CreateTweet(tweet models.CreateTweetRequest, user models.User) *models.Tweet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTweet", tweet, user)
	ret0, _ := ret[0].(*models.Tweet)
	return ret0
}

// CreateTweet indicates an expected call of CreateTweet.
func (mr *MockTweetRepositoryMockRecorder) CreateTweet(tweet, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTweet", reflect.TypeOf((*MockTweetRepository)(nil).CreateTweet), tweet, user)
}

// DeleteTweet mocks base method.
func (m *MockTweetRepository) DeleteTweet(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTweet", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteTweet indicates an expected call of DeleteTweet.
func (mr *MockTweetRepositoryMockRecorder) DeleteTweet(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTweet", reflect.TypeOf((*MockTweetRepository)(nil).DeleteTweet), id)
}

// GetTweetById mocks base method.
func (m *MockTweetRepository) GetTweetById(id string) *models.Tweet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweetById", id)
	ret0, _ := ret[0].(*models.Tweet)
	return ret0
}

// GetTweetById indicates an expected call of GetTweetById.
func (mr *MockTweetRepositoryMockRecorder) GetTweetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweetById", reflect.TypeOf((*MockTweetRepository)(nil).GetTweetById), id)
}

// GetTweets mocks base method.
func (m *MockTweetRepository) GetTweets() []models.Tweet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTweets")
	ret0, _ := ret[0].([]models.Tweet)
	return ret0
}

// GetTweets indicates an expected call of GetTweets.
func (mr *MockTweetRepositoryMockRecorder) GetTweets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTweets", reflect.TypeOf((*MockTweetRepository)(nil).GetTweets))
}
