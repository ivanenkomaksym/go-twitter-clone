version: '3.8'

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  go-twitter-clone-server:
    image: ivanenkomak/twitter-clone-server:latest
    pull_policy: always
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: twitter-clone-server
    volumes:
      # Map the JSON file from your local system to the container
      - ./secrets/service-account.json:/secrets/service-account.json:r
    environment:
      - "MODE=${MODE}"
      - "PROJECT_ID=${PROJECT_ID}"
      - "TWEETSSTORAGE_CONNECTIONSTRING=myuser:mypassword@tcp(twitter-mysql:3306)"
      - "FEEDSSTORAGE_CONNECTIONSTRING=mongodb://twitter-mongo:27017"
      - "NATS_URL=nats://twitter-nats:4222"
      - "APISERVER_APPLICATIONURL=${APISERVER_APPLICATIONURL}"
      - "AUTHENTICATION_ENABLE=${AUTHENTICATION_ENABLE}"
      - "AUTHENTICATION_OAUTH2_CLIENTID=${OAUTH2_CLIENT_ID}"
      - "AUTHENTICATION_OAUTH2_CLIENTSECRET=${OAUTH2_CLIENT_SECRET}"
      - "AUTHENTICATION_OAUTH2_REDIRECT_URI=${OAUTH2_REDIRECT_URI}"
      - "GOOGLE_SERVICE_ACCOUNT_KEY=${GOOGLE_SERVICE_ACCOUNT_KEY}"
      - "GOOGLE_APPLICATION_CREDENTIALS=/secrets/service-account.json"
      - "REDIRECT_URI=${REDIRECT_URI}"
      - "ALLOW_ORIGIN=${ALLOW_ORIGIN}"
    ports:
      - 8016:8016
    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_started
      nats:
        condition: service_started
    links: 
      - mysql
      - mongo
      - nats

  go-twitter-clone-client:
    image: ivanenkomak/twitter-clone-client:latest
    pull_policy: always
    build:
      context: ./client
      dockerfile: Dockerfile    
      args:
        REACT_APP_CLIENT_APPLICATIONURL: ${REACT_APP_CLIENT_APPLICATIONURL}
    container_name: twitter-clone-client
    environment:
      - "REACT_APP_CLIENT_APPLICATIONURL=${REACT_APP_CLIENT_APPLICATIONURL}"
    ports:
      - 3000:3000

  mysql:
    image: mysql:latest
    container_name: twitter-mysql
    environment:
      - "MYSQL_ROOT_PASSWORD=my-secret-pw"
      - "MYSQL_DATABASE=TweetsDb"
      - "MYSQL_USER=myuser"
      - "MYSQL_PASSWORD=mypassword"
    ports:
      - 3306:3306
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      placement:
        constraints:
          - node.labels.mode == Persistent

  mongo:
    image: mongo
    container_name: twitter-mongo
    ports:
      - 27017:27017
    deploy:
      placement:
        constraints:
          - node.labels.mode == Persistent

  nats:
    image: nats-streaming
    container_name: twitter-nats
    ports:
      - 4222:4222
    deploy:
      placement:
        constraints:
          - node.labels.mode == Persistent

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

