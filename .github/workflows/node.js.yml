# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./twitter-clone-client/package-lock.json
    - run: npm ci
      working-directory: ./twitter-clone-client
    - run: npm run build --if-present
      working-directory: ./twitter-clone-client
    - run: npm test
      working-directory: ./twitter-clone-client

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ env.DOCKER_USER }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ivanenkomak/twitter-clone-client
    - name: Build and push
      run: |
        IMAGE_TAG="ivanenkomak/twitter-clone-client:latest"
        DOCKERFILE="Dockerfile"
        echo "Building Docker image with latest tag: ${IMAGE_TAG}"
        docker buildx build -t "${IMAGE_TAG}" --file "${DOCKERFILE}" . --push
