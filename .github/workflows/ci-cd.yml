name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build-server:
    runs-on: ubuntu-latest

    services:
        mongo:
          image: mongo:latest
          ports:
            - 27017:27017
        mysql:
          image: mysql:latest
          env:
            MYSQL_ROOT_PASSWORD: my-secret-pw
            MYSQL_USER: myuser
            MYSQL_PASSWORD: mypassword
            MYSQL_DATABASE: Tests_TweetsDb
          ports:
            - 3306:3306
          options: >-
            --health-cmd "mysqladmin ping -h localhost"
            --health-interval=10s
            --health-timeout=5s
            --health-retries=5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.2'
        check-latest: true

    - name: Build Go app
      working-directory: ./server
      run: go build -v ./...

    - name: Run Go tests
      working-directory: ./server
      run: go test ./... -v

  build-client:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./client/package-lock.json

    - run: npm ci
      working-directory: ./client

    - run: npm run build --if-present
      working-directory: ./client

    - run: npm test
      working-directory: ./client

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [build-client, build-server]

    steps:
    - uses: actions/checkout@v4

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Run docker-compose
      run: |
        docker compose -f ./compose.yaml up -d --build
      env:
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        OAUTH2_CLIENT_ID: ${{ secrets.OAUTH2_CLIENT_ID }}
        OAUTH2_CLIENT_SECRET: ${{ secrets.OAUTH2_CLIENT_SECRET }}

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: |
        cd e2e_tests
        npm install

    - name: Run e2e tests
      env:
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      run: |
        cd e2e_tests
        npm test
        
    - name: Tear down docker-compose
      if: always()
      run: docker compose -f ./compose.yaml down

  push-images:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USER }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Push server image
      run: |
        docker buildx build -t "ivanenkomak/twitter-clone-server:latest" -f ./server/Dockerfile ./server --push

    - name: Push client image
      run: |
        docker buildx build -t "ivanenkomak/twitter-clone-client:latest" -f ./client/Dockerfile ./client --push